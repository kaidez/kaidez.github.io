---
layout: post
comments: true
title:  "kaidez.com 2015 site redesign"
date:   2015-11-20 22:07:59 -0400
categories: personal
permalink: /site-redesign-2015/
excerpt: kaidez.com uses underscores to create a custom Swiss-style Wordpress theme for his blogâ€™s new design. webpack and gulp manage the JS/CSS build process.
og-image: default-image.jpg
---
<p>Not only did my blog need a redesign, but it was also powered by Jekyll and I wanted to power it with WordPress&#8230;again. So over the course of six months, I redesigned it during my very limited downtime.</p><p>The new design uses a Swiss-styled theme created with help from WordPress&#8217; underscores starter theme. webpack and gulp manage the build-out process for the blog&#8217;s JavaScript and CSS.</p><h2 class="table-of-contents-header">Table of Contents</h2><ol><li><a href="#jekyll-wordpress">Goodbye Jekyll&#8230;Hello WordPress</a></li><li><a href="#swiss-style">Swiss Style</a></li><li><a href="#kaidez-swiss-theme">Creating the Kaidez Swiss Theme with underscores</a></li><li><a href="#css-gulp">CSS Build That&#8217;s Managed by gulp</a></li><li><a href="#js-css-webpack">JS &#038; CSS Build That&#8217;s Managed by webpack</a></li><li><a href="#page-load-optimization">Page Load Optimization</a></li><li><a href="#tooling">What I Think About Tooling</a></li><li><a href="#conclusion">Conclusion</a></li></ol><p><a name="jekyll-wordpress"></a></p><h2>Goodbye Jekyll&#8230;Hello WordPress</h2><p>As discussed in my <a href="/web/20160910115826/http://kaidez.com/site-redesign-2013/" alt="read kaidez's 2013 site redesign post">previous redesign post</a>, this site was previously built with <a href="https://jekyllrb.com/" alt="read more about the Jekyll static site generator">Jekyll</a>: a static site generator based mostly around blogging. Jekyll is simple to use, well documented and if you want to host your site on GitHub, you can <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/" alt="read more about GitHub pages">use Jekyll with GitHub Pages to build a site and get free hosting</a>.</p><p>Jekyll is awesome: it&#8217;s just not the right tool for my blog. There are some backend things I need to manage and it&#8217;s easier to do this with a content management system like WordPress.</p><p>The key backend things I want manage easily are:</p><ul><li class="post-list-item"><strong>SEO:</strong> the <a href="https://wordpress.org/plugins/wordpress-seo/" alt="read more about the Yoast SEO plugin">Yoast SEO</a> plugin is a <em>de facto</em> standard for WordPress. It implements lots of SEO best practices and, naturally, can&#8217;t be used with Jekyll. I was able to manually implement these best practices in the Jekyll site when I had to, but I prefer utilizing the convenience of Yoast SEO to manual configuration.</li><li class="post-list-item"><strong>301 redirects:</strong> some pages were deleted when I initially redesigned the site with Jekyll. So I had to redirect each of those page URLs to other URLs with 301 responses. This is also a manual process with static site generators and is a pain in the a**: switching back to WordPress allows me to easily manage this with the <a href="https://wordpress.org/plugins/redirection/" alt="read more about the Redirection plugin">Redirection plugin</a>.</li><li class="post-list-item"><strong>Internal search:</strong> Jekyll doesn&#8217;t have internal search functionality so adding it will be a custom job. You can use something relatively simple like <a href="https://cse.google.com/cse/">Google Custom Search Engine</a> or <a href="http://kaidez.com/custom-jekyll-search/" alt="read how kaidez built Jekyll custom search functionality">build it yourself like I did</a>. But WordPress&#8217; search functionality is fine with some customizations&#8230;customizations mostly provided by the <a href="https://wordpress.org/plugins/relevanssi/" alt="read more about the Relevanssi plugin for WordPress">Relevanssi plugin</a>.</li><li class="post-list-item"><strong>Related posts:</strong> as awesome as Jekyll is, I have no problem saying that it&#8217;s bad for displaying related posts&#8230;at least, I haven&#8217;t seen a solution I like. The <a href="https://disqus.com/home/explore/" alt="read more about the Disqus commenting system">Disqus commenting system</a> can display related posts as well as comments but for now, I&#8217;m not using Disqus. There are lots of WordPress plugins that can manage related posts quite well&#8230;I&#8217;m using the <a href="https://wordpress.org/plugins/related-posts-for-wp/" alt="read more about the Related Posts plugin for WordPress">Related Posts for WordPress</a>.</li></ul><p>I want to reiterate that Jekyll is awesome! It just wasn&#8217;t the right tool kaidez.com&#8230;OK?!?!?!</p><p><a name="swiss-style"></a></p><h2>Swiss Style</h2><p>I&#8217;d been wanting to design a version of my site based on the minimalist <a href="http://www.smashingmagazine.com/2009/07/lessons-from-swiss-style-graphic-design/" alt="Read Smashing Magazine's great article on Swiss Style">Swiss/International Style</a> and did just that. I was also really inspired by sites like <a href="http://www.swiss-style-design.com/" alt="Go to the Swiss Style Design site">Swiss Style Design</a> and <a href="http://www.swissted.com/" alt="Go to the Swissted site">Swissted</a>, with each applying the Swiss style to modern media.</p><p>Some of the basic principles of Swiss design are:</p><ul><li class="post-list-item"><strong>Grid design</strong>: the (very hard) trick with Swiss design is convey an artistic statement while placing all the design elements in some sort of grid. This was tough to do in some spots but I&#8217;m happy with the end result.</li><li class="post-list-item"><strong>Lowercase letters:</strong> pretty easy to implement.</li><li class="post-list-item"><strong>Limit the use of colors:</strong> white, black and pink for the new site. Pink is the base color, with different variations of it used for links, rollovers, and some text.</li></ul><p>Most of these principle are applied to the header and footer. In terms of content, they&#8217;re applied to the homepage but that&#8217;s it. Again, applying a grid is hard, especially if it needs to be applied to text.<br/> <a name="kaidez-swiss-theme"></a></p><h2>Creating the Kaidez Swiss Theme with underscores</h2><p>I usually <a href="https://codex.wordpress.org/Child_Themes" alt="Read about creating child themes in WordPress">create child themes</a> when designing a WordPress site but I decided to create my own theme for this project. This means I needed the standard starter WordPress theme, which is currently <a href="http://underscores.me/" alt="Read about the undescores starter child theme for WordPress">underscores</a>, or &#8220;_s&#8221; as it&#8217;s commonly referred to.</p><p>underscores provides the standard WordPress theme code base: post/page templates, a <code>style.css</code> file, a <code>functions.php</code> file, etc. From there, I added my own CSS &#038; JavaScript and created custom post/page types until I got what I wanted.</p><p>underscores does a great job of &#8220;staying out of your way&#8221; as you build your theme. There were a few <code>.js</code> files that needed to be <a href="http://wordpress.stackexchange.com/questions/189985/how-to-properly-dequeue-scripts-and-styles-in-child-theme" alt="Read about enqueuing and dequeuing .js files in WordPress">enqueued and dequeued</a> but for the most part, underscores gave me just enough code to get started and didn&#8217;t hamper my front-end development process&#8230;exactly what I needed.</p><p><a name="css-gulp"></a></p><h2>CSS Build That&#8217;s Managed by gulp</h2><p>By front-end development, I&#8217;m referring to the JavaScript and CSS parts of my blog. For the CSS, if you&#8217;ve seen <a href="/web/20160910115826/http://kaidez.com/css-build-demo/" alt="Watch my css build demo screencast">my CSS build demo screencast</a>, you know that I&#8217;ve got a really firm css build process in place with the help of <a href="http://gulpjs.com/" alt="learn about gulp: a node.js build system">gulp</a> (and a little <a href="http://gruntjs.com/" alt="learn about grunt: a node.js build system">grunt</a>).</p><p>gulp builds out the core <code>style.css</code> file required for all WordPress themes as follows:</p><ul><li class="post-list-item">manages <a href="http://lesscss.org/">Less</a> for CSS-preprocessing.</li><li class="post-list-item">concatenates my custom styles with the core <code>bootstrap.css</code> file.</li><li class="post-list-item">scans my blog for any unused CSS, then completely removes it from the site build.</li><li class="post-list-item">adds the standard comment block required for WordPress&#8217; <code>style.css</code> file.</li></ul><p>gulp does a few other tasks, but it&#8217;s mostly managing the CSS like this.</p><p><a name="js-css-webpack"></a></p><h2>JS &#038; CSS Build That&#8217;s Managed by webpack</h2><p>While I&#8217;ve used gulp and grunt on many projects, I used <a href="http://webpack.github.io/" alt="learn more about the webpack module builder">webpack</a> for the first time with this redesign. Using it actually shifted my opinion to using <strong>less</strong> third-party tooling in web dev and I&#8217;ll discuss that later, but I enjoyed using webpack for this project&#8230;even though it may be the last time I use it.</p><p>webpack was easy to use and setup, but there&#8217;s not enough room to go in-depth about it in this post. I will say that I used webpack to manage modular JavaScript as well as create page-specific CSS via inline styles, and that my next post will go much more in depth about it.</p><p>webpack also manages specific CSS for each custom post and page type. For each type, I created specific CSS with <a href="http://sass-lang.com/" alt="Go to the Sass site">Sass</a>, then webpack processed the code in an inline <code>&lt;style&gt;</code> in the HTML.</p><p>webpack is similar to <a href="http://browserify.org/">Browserify</a>: it&#8217;s a tool for building modular site code based on the Node/CommonJS method (although it can do AMD stuff with a plugin). Browserify creator <a href="http://twitter.com/substack">@substack</a> has outlined differences between the two in <a href="https://gist.github.com/substack/68f8d502be42d5cd4942" alt="read 'browserify for webpack users' written by substack">this GitHub Gist</a> and I suggest you read it.</p><p>Lots of functionality already built into webpack is ~mostly~ available only via plugins with Browserify, and this is the core difference. Also, the internal tooling used to build out code is noticeably different.</p><p>Whether or not that&#8217;s good or bad, it&#8217;s tough for me to say. Read substack&#8217;s Gist and form your own opinion on this.</p><p><a name="page-load-optimization"></a></p><h2>Page Load Optimization</h2><p>Staying on topic with the JavaScript, it was written to do many things. I&#8217;ll discuss them more in depth in my next post but will talk about, what I think is, the most interesting thing now, which is optimizing overall page load.</p><p>For example: this is what a blog post page on my site looks like in a browser:<br/> <img src="/img/page-diagram-full-2015.png" title="Image of a fully loaded blog page" width="280" height="373"/></p><p>But in terms of the blog post page that gets requested from the server, <em>that</em> looks like this:<br/> <img src="/img/page-diagram-full-2015.png" alt="Image of a fully loaded blog page" width="280" height="373"/></p><p>The server loads the page with the critical content only: the branding, the navigation, the search bar and the blog post copy. The <code>aside</code>, <code>footer</code> and ads load in via XHR requests after the page has fully loaded.</p><p>With minification, most blog post pages have about 40kb file size and render the blog copy in roughly half a second. The ads, <code>aside</code> and <code>footer</code> load in after that half a second has passed.</p><p>That&#8217;s how desktop works&#8230;mobile is slightly different.</p><p>The content still renders in about half a second, but the <code>aside</code> and <code>footer</code> content only loads if the user specifically requests it. On mobile <em>only</em>, users are presented with a button to make just such a request.</p><p><img src="/img/footer-button.jpg" title="Image of the footer button" width="300" height="107"/></p><p>Also on mobile, almost none of the ads load&#8230;why punish mobile users? The exception is Google ads that appear with post copy, who have strict rules about hiding and showing ads.</p><p><a name="tooling"></a></p><h2>What I Think About Tooling</h2><p>First, a few random thoughts I have about web dev tooling in no particular order:</p><ul><li class="post-list-item">The best thing about the current JS tooling environment is the variety of tool options, meaning developers can create any environment the want.</li><li class="post-list-item">I love grunt.</li><li class="post-list-item">gulp is more &#8220;Node-y&#8221; than grunt and that appeals to developers that like working in a Node environment. I am one of those developers and I left grunt for gulp&#8230;</li><li class="post-list-item">&#8230;but I still &#8220;just like&#8221; gulp because it&#8217;s not as easy to configure when compared to grunt.</li><li class="post-list-item">I didn&#8217;t use Browserify that much until I started working at <a href="http://everydayhealth.com/">Everyday Health</a>. Now that I use it frequently, I really like it.</li><li class="post-list-item">I started redesigning my blog at the same time I started working at Everyday Health and webpack was gaining popularity. I was curious about it, so I used it in the redesign process instead of Browserify.</li><li class="post-list-item">I really like how webpack modularizes <code>.js</code> file builds and its out-of-the-box code splitting functionality&#8230;</li><li class="post-list-item">&#8230;but I encountered a bug while webpack worked side-by-side with gulp. And after trying to fix it myself and looking on Stack Overflow, Slack and various GitHub bug trackers, I&#8217;ve yet to find a fix.</li><li class="post-list-item">I also had to spend time learning and configuring webpack, which is fine. That&#8217;s what web developers must do&#8230;</li><li class="post-list-item">&#8230;but had I stuck with tooling I was already familiar with, time spent learning/configuring webpack would have been put towards developing.</li><li class="post-list-item">I&#8217;m glad I used to both gulp and webpack and gained an understanding how they work. But in hindsight, I can&#8217;t come up with a good reason for why I didn&#8217;t stay with grunt&#8230;except that a tweet or blog post told me to do so.</li></ul><p>Prior to publishing this post, lots of community leaders have written about the web dev tooling onslaught, suggesting the use of the <a href="https://docs.npmjs.com/misc/scripts" alt="read about the npm scripts property">npm scripts property in <code>package.json</code></a>. These writings have justified my feeling more than influence them.</p><p>What I mean is, moving forward I&#8217;m going to <em>try</em> to limit my tools to npm scripts and Browserify. There&#8217;s a ton of documentation that I can use to ramp up on tooling via npm scripts&#8230;I&#8217;ll spend some time ramping up on the next project so I know how to set up tooling faster on the next projects.</p><p>Browserify is something I need to stick with for two reasons:</p><ol><li>It assists with ES6 transpiling, and I&#8217;m writing more and more ES6.</li><li>Everyday Health uses it so I need to keep up with it.</li></ol><p>If I <em>have</em> to use other tooling for personal projects, I&#8217;m may choose grunt. This means that some developers won&#8217;t think of me as &#8220;one of the cool kids&#8221; for not using gulp or webpack, and I could care less about that.</p><p><a name="conclusion"></a></p><h2>Conclusion</h2><p>My blog is now easier to manage with WordPress and I have a plan for simplifying my tooling. All this means that I can focus more on developing instead of fixing site bugs and ramping up on the &#8220;next big thing&#8221; in build tools.</p><p>Only time will tell but I think I made the right decisions here. Of course, the only constant in life is change and my above opinions may change at some point.</p><p>But overall, I&#8217;m happy with all of this. For now.</p>